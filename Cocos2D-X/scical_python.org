
* Numpy：操作与处理数据

** 什么是 Numpy 和 Numpy 数组

*** Numpy数组

*** Numpy参考文档

    + 在线版： [[http://docs.scipy.org]]
    + 交互式：
      #+BEGIN_SRC python
        np.array?
      #+END_SRC
    + 查询某种结构或功能
      #+BEGIN_SRC python
        np.lookfor('create array')
      #+END_SRC

      #+BEGIN_SRC python
        np.con?
      #+END_SRC

*** 导入Numpy的建议
    #+BEGIN_SRC python
      import numpy as np
    #+END_SRC

** 创建 Numpy 数组

*** 手动创建数组

    + 一维数组：
      #+BEGIN_SRC python
        import numpy as np
        a = np.array([0,1,2,3])
        a.ndim
        a.shape
        len(a)
      #+END_SRC

    + 二维及多维数组
      #+BEGIN_SRC python
        import numpy as np
        b = np.array([[0,1,2], [3,4,5]])
        c = np.array([[[1], [2]], [[3], [4]]])
      #+END_SRC



*** 用函数创建数组

    + 等间距分布的数组
      #+BEGIN_SRC python
        a = np.arange(10) # 0 .. n-1
      #+END_SRC

    + 指定数量的数组
      #+BEGIN_SRC python
        c = np.linspace(0, 1, 6) # start, end, num-points
        c = np.linspace(0, 1, 5, endpoint = False)
      #+END_SRC

    + 一些常用的数组
      #+BEGIN_SRC python
        a = np.ones((3,3))
        b = np.zeros((2,2))
        c = np.eye(3)
        d = np.diag(np.array([1,2,3,4]))
      #+END_SRC

    + =np.random= 随机数组(梅森旋转算法生成)
      #+BEGIN_SRC python
        a = np.random.rand(4) # uniform in [0,1]
        b = np.random.randn(4) # Gaussian
        np.random.seed(1234) # settiing the random seed
      #+END_SRC

** 基本数据类型

   1. Numpy 会自动检测输入的数据类型
   2. 可以显式指定数据类型
      #+BEGIN_SRC python
        c = np.array([1,2,3], dtype=float)
        c.dtype
      #+END_SRC
   3. 默认的数据类型是浮点型
      #+BEGIN_SRC python
        a = np.ones((3,3))
        a.dtype
      #+END_SRC

** 基本的数据可视化

   1. 打开 =IPython=, 或者方便起见，使用 =jupyter notebook=
   2. 打开交互绘图功能
      #+BEGIN_SRC python
        %matplotlib inline
      #+END_SRC
      =inline= 可以让我们在 =notebook= 里就能看到图，不会打开新的窗口
   3. 导入 =Matplotlib= 包
      #+BEGIN_SRC python
        import matplotlib.pyplot as plt
      #+END_SRC
   4. 然后可以使用，注意，如果没有使用 =%matplotlib inline=, 要显示图片，需要显式地调用 =show= 命令
      #+BEGIN_SRC python
        plt.plot(x,y)
        plt.show()
      #+END_SRC
      如果执行了 =%matplotlib inline=, 可以更简单
      #+BEGIN_SRC python
        plot(x,y)
      #+END_SRC

   5. 图像
      + 一维图像

        #+BEGIN_SRC python
          x = np.linspace(0, 3, 20)
          y = np.linspace(0, 9, 20)
          plt.plot(x, y) #inline plot
          plt.plot(x, y, 'o') #dot plot
        #+END_SRC

      + 二维图像

        #+BEGIN_SRC python
          image = np.random.rand(30, 30)
          plt.imshow(image, cmap=plt.cm.hot)
          plt.colorbar()
        #+END_SRC

** 索引与切片
*** 索引
   1. =array= 中元素可以通过索引取得
      #+BEGIN_SRC python
        >>> a = np.arange(10)
        >>> a[0]
        0
        >>> a[2]
        2
      #+END_SRC
   2. =array= 元素倒序
      #+BEGIN_SRC python
        >>> a[::-1]
      #+END_SRC
   3. 对于多维的 =array=, 其中元素的指标是用 =tuple= 保存的整数
      #+BEGIN_SRC python
        >>> a = np.diag(np.arange(3))
        >>> a
        array([[0, 0, 0],
               [0, 1, 0],
               [0, 0, 2]])
        >>> a[1,1], a[2,1]
        (1, 0)
      #+END_SRC

*** 切片
    1. =array= 可以和其他 =Python= 内置的序列一样进行切片
       #+BEGIN_SRC python
         >>> import numpy as np
         >>> a = np.arange(10)
         >>> a
         array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
         >>> a[2:9:3]
         array([2, 5, 8])
       #+END_SRC
    2. 注意，最后一个索引不会被取出
       #+BEGIN_SRC python
         >>> a[:4]
         array([0, 1, 2, 3])
       #+END_SRC
    3. 切片语法中三个 components 并不是必须的，默认值是， =start= 是 0， =end= 是最后一个元素， =step= 是 1
       #+BEGIN_SRC python
         >>> a[1:3]
         array([1, 2])
         >>> a[::2]
         array([0, 2, 4, 6, 8])
         >>> a[3:]
         array([3, 4, 5, 6, 7, 8, 9])
       #+END_SRC

*** 总结
    关于 =Indexing= 和 =Slicing=, 下图是它们的一个总结
    [[file:Pictures/Scipy/numpy_indexing.png]]

** 复制与查看
   一个 =slicing= 的操作会给原始的 =array= 创建一个 =view=, 这样原始的 =array= 不会复制到内存中。
   利用 =np.may_share_memory()= 函数可以查看两个 =array= 是否共享同样的内存地址。

   #+BEGIN_SRC python
     >>> a = np.arange(10)
     >>> a
     array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
     >>> b = a[::2]
     >>> b
     array([0, 2, 4, 6, 8])
     >>> np.may_share_memory(a,b)
     True
     >>> b[0] =12
     >>> b
     array([12,  2,  4,  6,  8])
     >>> a
     array([12,  1,  2,  3,  4,  5,  6,  7,  8,  9])
     >>>
     >>> a = np.arange(10)
     >>> c = a[::2].copy()
     >>> c[0] = 12
     >>> a
     array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
     >>> c
     array([12,  2,  4,  6,  8])
     >>> np.may_share_memory(a,c)
     False
   #+END_SRC

***  埃式筛法的 =Python= 实现
    1.
    2.
    3.

** Fancy Indexing
   =Array= 除了可以通过切片进行索引，还可以通过 =boolean array= 和 =interger =array= 进行索引。
   这种方法叫做 =fancy indexing=, 这种操作创建的是 =copy= 而非 =view=.

   1. Using boolean masks
      #+BEGIN_SRC python
        >>> np.random.seed(3)
        >>> a = np.random.randint(0, 20, 15, int)
        >>> a
        array([10,  3,  8,  0, 19, 10, 11,  9, 10,  6,  0, 20, 12,  7, 14])
        >>> (a % 3 == 0)
        array([False,  True, False,  True, False, False, False,  True, False,
                True,  True, False,  True, False, False], dtype=bool)
        >>> mask = (a % 3 == 0)
        >>> extract_from_a = a[mask] # or,  a[a%3==0]
        >>> extract_from_a           # extract a sub-array with the mask
        array([ 3,  0,  9,  6,  0, 12])
      #+END_SRC
      注意：利用 =boolean array= 可以很方便地对 =array= 进行赋值
      #+BEGIN_SRC python
        >>> a[a % 3 == 0] = -1
        >>> a
        array([10, -1,  8, -1, 19, 10, 11, -1, 10, -1, -1, 20, -1,  7, 14])
      #+END_SRC
   2. Indexing with an array of integers
      #+BEGIN_SRC python
        >>> a = np.arange(0, 100, 10)
        >>> a
        array([ 0, 10, 20, 30, 40, 50, 60, 70, 80, 90])
        >>> a[[2, 3, 2, 4, 2]]  # note: [2, 3, 2, 4, 2] is a Python list
        array([20, 30, 20, 40, 20])
        >>> a[[9, 7]] = -100
        >>> a
        array([   0,   10,   20,   30,   40,   50,   60, -100,   80, -100])
      #+END_SRC
      注意：当一个新 =array= 通过 =index with an array of integers= 时，新的 =array= 会与 =array with integers=
      拥有相同的结构
      #+BEGIN_SRC python
        >>> a = np.arange(10)
        >>> idx = np.array([[3, 4], [9, 7]])
        >>> idx.shape
        (2, 2)
        >>> a[idx]
        array([[3, 4],
               [9, 7]])
      #+END_SRC
   3. 总结
      [[file:Pictures/Scipy/numpy_fancy_indexing.png]]

** 数组的数值运算
*** 元素智能运算
    1. 数组与标量
       #+BEGIN_SRC python
         >>> a = np.array([1, 2, 3, 4])
         >>> a + 1
         array([2, 3, 4, 5])
         >>> 2**a
         array([ 2,  4,  8, 16])
       #+END_SRC
    2. 所有运算符都是元素智能的
       #+BEGIN_SRC python
         >>> b = np.ones(4) + 1
         >>> a - b
         array([-1.,  0.,  1.,  2.])
         >>> a * b
         array([ 2.,  4.,  6.,  8.])

         >>> j = np.arange(5)
         >>> 2**(j + 1) - j
         array([ 2,  3,  6, 13, 28])
       #+END_SRC
    3. 数组乘法并非矩阵乘法
       #+BEGIN_SRC python
         >>> c = np.ones((3, 3))
         >>> c * c                   # 不是矩阵乘法！
         array([[ 1.,  1.,  1.],
                [ 1.,  1.,  1.],
                [ 1.,  1.,  1.]])
         >>> c.dot(c)
         array([[ 3.,  3.,  3.],
                [ 3.,  3.,  3.],
                [ 3.,  3.,  3.]])
       #+END_SRC
    4. 其他运算
       + 比较
         #+BEGIN_SRC python
           >>> a = np.array([1, 2, 3, 4])
           >>> b = np.array([4, 2, 2, 4])
           >>> a == b
           array([False,  True, False,  True], dtype=bool)
           >>> a > b
           array([False, False,  True, False], dtype=bool)
         #+END_SRC

       + 逻辑运算
         #+BEGIN_SRC python
           >>> a = np.array([1, 1, 0, 0], dtype=bool)
           >>> b = np.array([1, 0, 1, 0], dtype=bool)
           >>> np.logical_or(a, b)
           array([ True,  True,  True, False], dtype=bool)
           >>> np.logical_and(a, b)
           array([ True, False, False, False], dtype=bool)
         #+END_SRC

       + 超越函数
         #+BEGIN_SRC python
           >>> a = np.arange(5)
           >>> np.sin(a)
           array([ 0.        ,  0.84147098,  0.90929743,  0.14112001, -0.7568025 ])
           >>> np.log(a)
           array([       -inf,  0.        ,  0.69314718,  1.09861229,  1.38629436])
           >>> np.exp(a)
           array([  1.        ,   2.71828183,   7.3890561 ,  20.08553692,  54.59815003])
         #+END_SRC

       + 转置
         #+BEGIN_SRC python
           >>> a = np.triu(np.ones((3, 3)), 1)   # see help(np.triu)
           >>> a
           array([[ 0.,  1.,  1.],
                  [ 0.,  0.,  1.],
                  [ 0.,  0.,  0.]])
           >>> a.T
           array([[ 0.,  0.,  0.],
                  [ 1.,  0.,  0.],
                  [ 1.,  1.,  0.]])
         #+END_SRC
         注意： 数组的转置仅仅是创建了一个 =view=, 因此 =a+a.T= 是错的，不会产生对称矩阵

       + 线性代数
         =numpy.linalg= 是线性代数运算的补充，但是，效果不如 =scipy.linalg=
*** 基本简化运算
    1. 求和
       + 基础
         #+BEGIN_SRC python
           >>> x = np.array([1, 2, 3, 4])
           >>> np.sum(x)
           10
           >>> x.sum()
           10
         #+END_SRC
       + 按行列求和
         #+BEGIN_SRC python
           >>> x = np.array([[1, 1], [2, 2]])
           >>> x
           array([[1, 1],
                  [2, 2]])
           >>> x.sum(axis=0)   # 按列求和（第一维）
           array([3, 3])
           >>> x[:, 0].sum(), x[:, 1].sum()
           (3, 3)
           >>> x.sum(axis=1)   # 按行求和（第二维）
           array([2, 4])
           >>> x[0, :].sum(), x[1, :].sum()
           (2, 4)
         #+END_SRC
       + 高维数组求和
         #+BEGIN_SRC python
           >>> x = np.random.rand(2, 2, 2)
           >>> x.sum(axis=2)[0, 1]
           1.14764...
           >>> x[0, 1, :].sum()
           1.14764...
         #+END_SRC
    2. 其他简化运算
       格式与求和运算类似
       + 极值
         #+BEGIN_SRC python
           >>> a = np.array([[1,3,4], [3,5,3], [2,3,4]])
           >>> a.min()
           1
           >>> a.min(axis=0)
           array([1, 3, 3])
           >>> a.max(axis=0)
           array([3, 5, 4])
         #+END_SRC
       + 逻辑运算
         #+BEGIN_SRC python
           >>> np.all([True, True, False])
           False
           >>> np.any([True, True, False])
           True
         #+END_SRC
         可用于数组间比较
         #+BEGIN_SRC python
           >>> a = np.zeros((100, 100))
           >>> np.any(a != 0)
           False
           >>> np.all(a == a)
           True

           >>> a = np.array([1, 2, 3, 2])
           >>> b = np.array([2, 2, 3, 2])
           >>> c = np.array([6, 4, 4, 5])
           >>> ((a <= b) & (b <= c)).all()
           True
         #+END_SRC
       + 统计
         #+BEGIN_SRC python
           >>> x = np.array([1, 2, 3, 1])
           >>> y = np.array([[1, 2, 3], [5, 6, 1]])
           >>> x.mean()
           1.75
           >>> np.median(x)
           1.5
           >>> np.median(y, axis=-1) # last axis
           array([ 2.,  5.])

           >>> x.std()          # 整体标准差
           0.82915619758884995
         #+END_SRC
       + 关于 =sum= 与 =cumsum=
         =cumsum= 返回某个 =axis= 的累积和
         #+BEGIN_SRC python
           >>> a = np.array([[1,2,3], [4,5,6]])
           >>> a
           array([[1, 2, 3],
                  [4, 5, 6]])
           >>> np.cumsum(a)
           array([ 1,  3,  6, 10, 15, 21])
           >>> np.cumsum(a, dtype=float)     # specifies type of output value(s)
           array([  1.,   3.,   6.,  10.,  15.,  21.])
         #+END_SRC
         =sum= 返回某个 =axis= 的所有元素之和
         #+BEGIN_SRC python
           >>> a = np.array([[1,2,3], [4,5,6]])
           >>> a.sum()
           21
           >>> a.sum(axis=1)
           array([6,15])
         #+END_SRC
    3. 两个实例
       + 数据统计

       + 随机游走

*** Broadcasting
    下图是 =broadcasting= 的示意图， =broadcasting= 主要是用来在不同维度的 =array= 直接进行运算
    [[file:Pictures/Scipy/numpy_broadcasting.png]]

    示意图的 =python= 代码验证：
    #+BEGIN_SRC python
      >>> a = np.tile(np.arange(0, 40, 10), (3, 1)).T
      >>> a
      array([[ 0,  0,  0],
             [10, 10, 10],
             [20, 20, 20],
             [30, 30, 30]])
      >>> b = np.array([0, 1, 2])
      >>> a + b
      array([[ 0,  1,  2],
             [10, 11, 12],
             [20, 21, 22],
             [30, 31, 32]])
    #+END_SRC

    + 常用技巧
      #+BEGIN_SRC python
        >>> a = np.arange(0, 40, 10)
        >>> a.shape
        (4,)
        >>> a = a[:, np.newaxis]  # adds a new axis -> 2D array
        >>> a.shape
        (4, 1)
        >>> a
        array([[ 0],
               [10],
               [20],
               [30]])
        >>> a + b
        array([[ 0,  1,  2],
               [10, 11, 12],
               [20, 21, 22],
               [30, 31, 32]])
      #+END_SRC
    + 实例操作1：
    + 实例操作2：

*** 数组形状操作
    1. 扁平化
       #+BEGIN_SRC python
         >>> import numpy as np
         >>> a = np.array([[1,2,3],[4,5,6]])
         >>> a
         array([[1, 2, 3],
                [4, 5, 6]])
         >>> a.ravel()
         array([1, 2, 3, 4, 5, 6])
         >>> a.T
         array([[1, 4],
                [2, 5],
                [3, 6]])
         >>> a.T.ravel()
         array([1, 4, 2, 5, 3, 6])
       #+END_SRC
       + =flatten= 与 =ravel= 的区别
         =flatten= 创建的是一个 =copy=, =ravel= 创建的是一个 =view=
         #+BEGIN_SRC python
           >>> a = np.array([[1,2,3], [4,5,6]])
           >>> a
           array([[1, 2, 3],
                  [4, 5, 6]])
           >>> b = a.ravel()
           >>> c = a.flatten()
           >>> b
           array([1, 2, 3, 4, 5, 6])
           >>> c
           array([1, 2, 3, 4, 5, 6])
           >>> b[0] = 5
           >>> b
           array([5, 2, 3, 4, 5, 6])
           >>> a
           array([[5, 2, 3],
                  [4, 5, 6]])
           >>> c[2] = 5
           >>> c
           array([1, 2, 5, 4, 5, 6])
           >>> a
           array([[5, 2, 3],
                  [4, 5, 6]])
         #+END_SRC
    2. 整形
       可看做扁平化的逆操作
       #+BEGIN_SRC python
         >>> b = a.ravel()
         >>> b
         array([1, 2, 3, 4, 5, 6])
         >>> b = b.reshape(2,3)
         >>> b
         array([[1, 2, 3],
                [4, 5, 6]])
       #+END_SRC
       或者
       #+BEGIN_SRC python
         >>> b.reshape(2,-1) # -1 表示相应维度由程序判断
         array([[1, 2, 3],
                [4, 5, 6]])
       #+END_SRC
       + 注意：
         =np.reshape()= 可能返回数组的 =view= 也可能返回数组的 =copy=
         #+BEGIN_SRC python
           >>> b[0,0] = 99
           >>> b
           array([[99,  2,  3],
                  [ 4,  5,  6]])
           >>> a
           array([[99,  2,  3],
                  [ 4,  5,  6]])
         #+END_SRC
         整形操作也可能返回数组的复制
         #+BEGIN_SRC python
           >>> a = np.zeros((3,2))
           >>> b = a.T.reshape(3*2)
           >>> b[0] = 9
           >>> b
           array([ 9.,  0.,  0.,  0.,  0.,  0.])
           >>> a
           array([[ 0.,  0.],
                  [ 0.,  0.],
                  [ 0.,  0.]])
         #+END_SRC
    3. 添加维度
       在数组索引时，添加 =np.newaxis= 就可以给数组添加维度，在上面 =Broadcasting= 已经讲过
    4. 维度 Shuffling
       #+BEGIN_SRC python
         >>> a = np.arange(4*3*2).reshape(4, 3, 2)
         >>> a.shape
         (4, 3, 2)
         >>> a[0, 2, 1]
         5
         >>> b = a.transpose(1, 2, 0)
         >>> b.shape
         (3, 2, 4)
         >>> b[2, 1, 0]
         5
       #+END_SRC
       它输出的是数组的 =view=
       #+BEGIN_SRC python
         >>> b[2, 1, 0] = -1
         >>> a[0, 2, 1]
         -1
       #+END_SRC
    5. 改变尺寸
       数组尺寸可以用 =resize()= 进行改变
       #+BEGIN_SRC python
         >>> a = np.arange(4)
         >>> a.resize((8,))
         >>> a
         array([0, 1, 2, 3, 0, 0, 0, 0])
       #+END_SRC
       被改变尺寸的数组不能被其他对象引用
       #+BEGIN_SRC python
         >>> b = a
         >>> a.resize((4,))
         Traceback (most recent call last):
           File "<stdin>", line 1, in <module>
         ValueError: cannot resize an array that has been referenced or is
         referencing another array in this way.  Use the resize function
       #+END_SRC
*** 数据排序
    1. 简单排序
       #+BEGIN_SRC python
         >>> a
         array([[5, 2, 3],
                [4, 5, 6]])
         >>> a.sort(axis=1)
         >>> a
         array([[2, 3, 5],
                [4, 5, 6]])
         >>> b.reshape(2,3)
         array([[2, 3, 5],
                [4, 5, 6]])
         >>> b
         array([2, 3, 5, 4, 5, 6])
         >>> np.sort(b.reshape(2,3),axis=1)
         array([[2, 3, 5],
                [4, 5, 6]])
       #+END_SRC
    2. 排序与数组索引结合
         #+BEGIN_SRC python
           >>> a = np.array([4, 3, 1, 2])
           >>> j = np.argsort(a)
           >>> j
           array([2, 3, 1, 0])
           >>> a[j]
           array([1, 2, 3, 4])
         #+END_SRC
    3. 极大值与极小值的索引
         #+BEGIN_SRC python
           >>> a = np.array([4, 3, 1, 2])
           >>> j_max = np.argmax(a)
           >>> j_min = np.argmin(a)
           >>> j_max, j_min
           (0, 2)
         #+END_SRC
*** 总结
    1. 如何创建数组 =array= =arange= =zeros= =ones=
    2. 查看数组尺寸 =shape=, 利用切片得到数组的 =view=, =reshape= =ravel= =flatten= 数组变形，尺寸改变等
    3. 数组排序
    4. 利用数组掩码进行数组编辑 =a[a<0] = 0=
**  绘图 (Matplotlib)
